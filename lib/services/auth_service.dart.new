import 'dart:convert';
import 'package:flutter/material.dart';
import 'package:http/http.dart' as http;
import 'package:shared_preferences/shared_preferences.dart';
import '../models/doctor.dart';

class AuthService {
  static const String baseUrl =
      'http://10.0.2.2:8080'; // For Android emulator to connect to localhost
  static const String tokenKey = 'auth_token';
  static const String userKey = 'user_data';

  // Register a new doctor
  Future<Map<String, dynamic>> register({
    required String username,
    required String password,
    required String email,
    String? fullName,
    String? specialty,
  }) async {
    try {
      debugPrint('Sending register request to: $baseUrl/auth/register');
      debugPrint('Register data: username=$username, email=$email, fullName=$fullName, specialty=$specialty');
      
      final response = await http.post(
        Uri.parse('$baseUrl/auth/register'),
        headers: {'Content-Type': 'application/json'},
        body: jsonEncode({
          'username': username,
          'password': password,
          'email': email,
          'full_name': fullName,
          'specialty': specialty,
        }),
      );

      debugPrint('Register response status code: ${response.statusCode}');
      debugPrint('Register response body: ${response.body}');
      
      final data = jsonDecode(response.body);
      if (data['success'] == true && data['token'] != null) {
        // Save authentication token and user data
        debugPrint('Registration successful, saving auth data');
        await _saveAuthData(data['token'], data['user']);
      } else {
        debugPrint('Registration failed: ${data['message']}');
      }

      return data;
    } catch (e) {
      debugPrint('Registration error: ${e.toString()}');
      return {
        'success': false,
        'message': 'Connection error: ${e.toString()}',
      };
    }
  }

  // Login a doctor
  Future<Map<String, dynamic>> login({
    required String username,
    required String password,
  }) async {
    try {
      debugPrint('Sending login request to: $baseUrl/auth/login');
      
      final response = await http.post(
        Uri.parse('$baseUrl/auth/login'),
        headers: {'Content-Type': 'application/json'},
        body: jsonEncode({
          'username': username,
          'password': password,
        }),
      );

      debugPrint('Login response status code: ${response.statusCode}');
      debugPrint('Login response body: ${response.body}');
      
      final data = jsonDecode(response.body);
      if (data['success'] == true && data['token'] != null) {
        // Save authentication token and user data
        debugPrint('Login successful, saving auth data');
        await _saveAuthData(data['token'], data['user']);
      } else {
        debugPrint('Login failed: ${data['message']}');
      }

      return data;
    } catch (e) {
      debugPrint('Login error: ${e.toString()}');
      return {
        'success': false,
        'message': 'Connection error: ${e.toString()}',
      };
    }
  }

  // Logout a doctor
  Future<bool> logout() async {
    try {
      final token = await getToken();
      if (token == null) {
        return true; // Already logged out
      }

      final response = await http.post(
        Uri.parse('$baseUrl/auth/logout'),
        headers: {
          'Content-Type': 'application/json',
          'Authorization': 'Bearer $token',
        },
      );

      // Clear saved authentication data
      await _clearAuthData();

      return jsonDecode(response.body)['success'] ?? true;
    } catch (e) {
      // If logout request fails, still clear local data
      await _clearAuthData();
      return true;
    }
  }

  // Get current doctor profile
  Future<Map<String, dynamic>?> getCurrentDoctor() async {
    try {
      final token = await getToken();
      if (token == null) {
        return null;
      }

      final response = await http.get(
        Uri.parse('$baseUrl/auth/me'),
        headers: {
          'Content-Type': 'application/json',
          'Authorization': 'Bearer $token',
        },
      );

      final data = jsonDecode(response.body);
      if (data['success'] == true && data['user'] != null) {
        return data['user'];
      }

      return null;
    } catch (e) {
      return null;
    }
  }

  // Check if user is authenticated
  Future<bool> isAuthenticated() async {
    final token = await getToken();
    return token != null;
  }

  // Get saved authentication token
  Future<String?> getToken() async {
    final prefs = await SharedPreferences.getInstance();
    return prefs.getString(tokenKey);
  }

  // Get saved user data
  Future<Doctor?> getSavedDoctor() async {
    final prefs = await SharedPreferences.getInstance();
    final userData = prefs.getString(userKey);
    if (userData == null) {
      return null;
    }

    try {
      return Doctor.fromJson(jsonDecode(userData));
    } catch (e) {
      return null;
    }
  }

  // Save authentication data
  Future<void> _saveAuthData(
      String token, Map<String, dynamic> userData) async {
    final prefs = await SharedPreferences.getInstance();
    await prefs.setString(tokenKey, token);
    await prefs.setString(userKey, jsonEncode(userData));
  }

  // Clear authentication data
  Future<void> _clearAuthData() async {
    final prefs = await SharedPreferences.getInstance();
    await prefs.remove(tokenKey);
    await prefs.remove(userKey);
  }
}
